{"ts":1366348609772,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1366348615915,"patch":[[{"diffs":[[1,"<?php\n$inputs = array(\n    array( +1, +1 ),\n    array( +1, -1 ),\n    array( +1, +0 ),\n    array( +0, +1 ),\n    array( +0, -1 ),\n    array( +0, +0 ),\n    array( -1, +1 ),\n    array( -1, -1 ),\n    array( -1, +0 ),\n);\n\n/**\n * op | one | two | value\n * ===+=====+=====+======\n * +  | +1  | +1  | +2\n * +  | +1  | -1  | +0\n * +  | +1  | +0  | +1\n * +  | +0  | +1  | +1\n * +  | +0  | -1  | -1\n * +  | +0  | +0  | +0\n * +  | -1  | +1  | +0\n * +  | -1  | -1  | -2\n * +  | -1  | +0  | -1\n */\nfunction add($value1, $value2)\n{\n    return $value1 + $value2;\n}\n{\n    $outputs = array(\n        +2,\n        +0,\n        +1,\n        +1,\n        -1,\n        +0,\n        +0,\n        -2,\n        -1,\n    );\n    \n    for ($i = 0; $i < 9; $i++)\n    {\n        assert(add($inputs[$i][0], $inputs[$i][1]) == $outputs[$i]);\n    }\n\n\n    $i = 0;\n    while ( $i < 9 )\n    {\n        assert(add($inputs[$i][0], $inputs[$i][1]) == $outputs[$i]);\n        $i++;\n    }\n    \n    while ( $input = current($inputs) and $output = current($outputs) )\n    {\n        assert(add($input[0], $input[1]) == $output);\n        next($inputs); next($outputs);\n    }\n    \n    foreach ( $inputs as $index => $input )\n    {\n        assert(add($input[0], $input[1]) == @$outputs[$index]);\n    }\n}\n\n/**\n * op | one | two | value\n * ===+=====+=====+======\n * -  | +1  | +1  | +0\n * -  | +1  | -1  | +2\n * -  | +1  | +0  | +1\n * -  | +0  | +1  | -1\n * -  | +0  | -1  | +1\n * -  | +0  | +0  | +0\n * -  | -1  | +1  | -2\n * -  | -1  | -1  |  0\n * -  | -1  | +0  | -1\n */\nfunction minus ( $a, $b )\n{\n    return $a - $b;\n}\n{\n    assert(minus(+1, +1) == +0);\n    assert(minus(+1, -1) == +2);\n    assert(minus(+1, +0) == +1);\n    assert(minus(+0, +1) == -1);\n    assert(minus(+0, -1) == +1);\n    assert(minus(+0, +0) == +0);\n    assert(minus(-1, +1) == -2);\n    assert(minus(-1, -1) == +0);\n    assert(minus(-1, +0) == -1);\n}\n\n/**\n * op | one | two | value\n * ===+=====+=====+======\n * x  | +1  | +1  | +1\n * x  | +1  | -1  | -1\n * x  | +1  | +0  | +0\n * x  | +0  | +1  | +0\n * x  | +0  | -1  | +0\n * x  | +0  | +0  | +0\n * x  | -1  | +1  | -1\n * x  | -1  | -1  | +1\n * x  | -1  | +0  | +0\n */\nfunction multiply( $a, $b)\n{\n    return $a * $b;\n}\n{\n    assert(multiply(+1,+1) == +1);\n    assert(multiply(+1,-1) == -1);\n    assert(multiply(+1,+0) == +0);\n    assert(multiply(+0,+1) == +0);\n    assert(multiply(+0,-1) == +0);\n    assert(multiply(+0,+0) == +0);\n    assert(multiply(-1,+1) == -1);\n    assert(multiply(-1,-1) == +1);\n    assert(multiply(-1,+0) == +0);\n}"]],"start1":0,"start2":0,"length1":0,"length2":2499}]],"length":2499,"saved":false}
