{"ts":1360947490006,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1360947496570,"patch":[[{"diffs":[[1,"// homework-6.1.md\n// version 1\n// karlfortenberry\n// kilofoxx@gmail.com\n// Febuary/15/2013"]],"start1":0,"start2":0,"length1":0,"length2":91}]],"length":91,"saved":false}
{"ts":1360947498100,"patch":[[{"diffs":[[0,"ework-6."],[-1,"1"],[0,".md\n// v"]],"start1":6,"start2":6,"length1":17,"length2":16}]],"length":90,"saved":false}
{"ts":1360947498930,"patch":[[{"diffs":[[0,"ework-6."],[1,"2"],[0,".md\n// v"]],"start1":6,"start2":6,"length1":16,"length2":17}]],"length":91,"saved":false}
{"ts":1360947500804,"patch":[[{"diffs":[[0,"/15/2013"],[1,"\n"]],"start1":83,"start2":83,"length1":8,"length2":9}]],"length":92,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361493973587,"patch":[[{"diffs":[[0,"15/2013\n"],[1,"\n\n<?php\n\n/**\n* Instaphp\n*\n* Copyright (c) 2011 randy sesser <randy@instaphp.com>\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n* THE SOFTWARE.\n*\n* @author randy sesser <randy@instaphp.com>\n* @copyright 2011, randy sesser\n* @license http://www.opensource.org/licenses/mit-license The MIT License\n* @package Instaphp\n* @filesource\n*/\n\nnamespace Instaphp {\n\n    use \\SimpleXMLElement;\n\n    /**\n* The Instaphp version. We pass this to Instagram as part of the User-Agent\n*/\n    define('INSTAPHP_VERSION', '1.0');\n\n    /**\n* Our Config class which extends the SimpleXMLElement class\n* See {inline @link http://php.net/simplexmlelement SimplXMLElement}\n* @package Instaphp\n* @version 1.0\n* @author randy sesser <randy@instaphp.com>\n*/\n    class Config extends SimpleXMLElement\n    {\n\n        /**\n* A static instance property for creating an instance of the Config object\n* @var Instaphp\\Config\n* @access private\n*/\n        private static $_instance = null;\n        /**\n* The path to the config.xml file\n* @var string\n* @access private\n*/\n        private static $file = null;\n\n        /**\n* Singleton method since the SimpleXMLElement class is essentially \"sealed\"\n* @return Config An instance of the Config object\n*/\n        public static function Instance()\n        {\n            if (static::$file == null)\n                static::$file = realpath(dirname(__FILE__)) . DIRECTORY_SEPARATOR . 'config.xml';\n\n            if (!file_exists(static::$file)) {\n                trigger_error(\"No configuration found for Instaphp. Using sample file!\", E_USER_WARNING);\nstatic::$file = realpath(dirname(__FILE__)) . DIRECTORY_SEPARATOR . 'config.sample.xml';\n}\n\n            if (null == static::$_instance)\n                static::$_instance = new self(static::$file, null, true);\n\n            return static::$_instance;\n        }\n\n        /**\n* A convenience method to build the OAuth URL to authenticate a user.\n* the value in the config.xml file should contain some \"tokens\" that\n* are replaced with other values in the config.\n* @access public\n* @return string The OAuth URL used to authenticate a user\n*/\n        public function GetOAuthUri()\n        {\n            if (!isset($this->Instagram))\n                return null;\n\n            $path = $this->Instagram->OAuthPath;\n            $path = str_replace(\"{ClientId}\", $this->Instagram->ClientId, $path);\n            $path = str_replace(\"{RedirectUri}\", $this->Instaphp->RedirectUri, $path);\n\n            if (!empty($this->Instagram->Scope))\n                $path .= '&scope=' . $this->Instagram->Scope;\n\n            return $this->Instagram->Endpoint . $path;\n        }\n\n        /**\n* A convenience method to build the OAuth URL used to retreive an access token\n* @return string The URL used to retrieve the access token\n*/\n        public function GetOAuthTokenUri()\n        {\n            if (!isset($this->Instagram))\n                return null;\n\n            return $this->Instagram->Endpoint . $this->Instagram->OAuthTokenPath;\n        }\n\npublic function CacheSetting($name, $key)\n{\n$cache = $this->xpath(\"//Instaphp/Cache[@Engine='File']\");\nif (empty($cache) || count($cache) == 0)\nreturn null;\n\n$cache = $cache[0];\n\nreturn $cache->Settings->Setting[$key];\n\n}\n\n        public function GetSection($section = null, \\SimpleXMLElement $parent = null)\n        {\n            if (empty($section))\n                return null;\n\n            if (null !== $parent)\n                return $parent->xpath($section);\n            \n            return $this->xpath($section);\n        }\n\n    }\n\n}"]],"start1":84,"start2":84,"length1":8,"length2":4524}]],"length":4608,"saved":false}
